import app.file_system as fs

"""A module to determine how to handle naming files generated by
the application."""

class FileName():
    """A data structure holding the fields required to create
    a file name."""

    def __init__(self):
        """Creates a new file name data structure."""

        self.job_reference = ""
        self.paperwork_type = ""
        self.file_extension = ""
        self.backup_directory = ""
        self.input_mode = ""

def create_backup_file_name(job_reference, paperwork_type, file_extension,
        backup_directory):
    """Creates the backup file name including the job reference,
    paperwork counter (if applicable), paperwork type and file
    extension.
    
    Checks if there is a duplicately named file already in the backup
    directory and loops through appending increasing page numbers
    to the file name till it is no longer duplicate."""

    file_name = (
        "GR" + job_reference + "_" + paperwork_type + file_extension)

    is_file_name_duplicate = fs.check_if_file_exists(
        file_name, backup_directory)
    
    page_counter = 1

    while is_file_name_duplicate:
        file_name = ("GR" + job_reference + "_" + paperwork_type + "_"
            + str(page_counter).zfill(3) + file_extension)
        
        is_file_name_duplicate = fs.check_if_file_exists(
            file_name, backup_directory)
        
        page_counter += 1
    
    return file_name

def create_destination_file_name(job_reference, paperwork_type,
        file_extension):
    """Creates the full file name of a file intended for the
    destination directory (i.e. FCL server directory to be
    uploaded)."""

    # Dictionary of file name flags that FCL uses to differentiate
    # between different paperwork types. 
    paperwork_type_flags = {
        "Cust PW": "++xShPaxIsVs0++OPSPWAT++Customer_Paperwork",
        "Loading List": "++xShxPaxIsVs0++OPSLDLST++Loading_List",
        "POD": "++xShxPaIsVs2++KPIPOD++Scanned_POD"}

    file_name = (
        "++" + job_reference + paperwork_type_flags[paperwork_type]
        + file_extension)

    return file_name

def create_file_names(job_reference, paperwork_type, input_mode,
        file_extension, backup_directory):
    """Creates the file names required for processing."""

    backup_file_name = create_backup_file_name(
        job_reference, paperwork_type,
        file_extension, backup_directory
    )

    dest_file_name = create_destination_file_name(
        job_reference, paperwork_type, ".pdf")

    return job_reference, backup_file_name, dest_file_name