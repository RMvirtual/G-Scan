import src.main.app.file_system as fs

"""A module to determine how to handle naming files generated by
the application."""

class FileNamingAttributes():
    """A data structure holding the fields required to create
    a file name."""

    def __init__(self):
        """Creates a new file name data structure."""

        self.job_reference = ""
        self.paperwork_type = ""
        self.page_number = None
        self.input_mode = ""
        self.file_extension = ""

def create_file_names(attributes: FileNamingAttributes,
        backup_directory: str) -> tuple:
    """Creates the file names required for processing."""

    job_ref = attributes.job_reference

    backup_file_name = create_backup_file_name(
        attributes, backup_directory)

    dest_file_name = create_destination_file_name(attributes)

    return job_ref, backup_file_name, dest_file_name

def create_backup_file_name(attributes: FileNamingAttributes,
        backup_directory: str) -> str:
    """Creates the backup file name including the job reference,
    paperwork counter (if applicable), paperwork type and file
    extension.
    
    Checks if there is a duplicately named file already in the backup
    directory and loops through appending increasing page numbers
    to the file name till it is no longer duplicate."""

    job_ref = attributes.job_reference
    file_extension = attributes.file_extension
    paperwork_type = attributes.paperwork_type

    file_name = (job_ref + "_" + paperwork_type)
    page_number = fs.get_number_of_files_containing_substring(
        file_name, backup_directory)

    if page_number > 1:
        file_name += page_number
    
    backup_file_name = file_name + file_extension
    
    return backup_file_name

def create_destination_file_name(attributes: FileNamingAttributes):
    """Creates the full file name of a file intended for the
    destination directory (i.e. FCL server directory to be
    uploaded)."""

    job_ref = attributes.job_reference
    file_extension = attributes.file_extension
    flags = get_paperwork_type_flags(attributes.paperwork_type)
    
    file_name = "++" + job_ref + flags + file_extension

    return file_name

def get_paperwork_type_flags_dictionary() -> dict:
    """Gets a dictionary containing the paperwork type FCL flags that
    will be inserted into a PDF file's name to be uploaded as the
    correct document type in FCL."""

    paperwork_type_flags_dictionary = {
        "Cust PW": "++xShPaxIsVs0++OPSPWAT++Customer_Paperwork",
        "Loading List": "++xShxPaxIsVs0++OPSLDLST++Loading_List",
        "POD": "++xShxPaIsVs2++KPIPOD++Scanned_POD"
    }

    return paperwork_type_flags_dictionary

def get_paperwork_type_flags(paperwork_type: str) -> str:
    """Uses the paperwork type flags dictionary and returns the FCL
    flags that will be inserted into a PDF file's name to be uploaded
    as the correct document type in FCL."""

    flags_dictionary = get_paperwork_type_flags_dictionary()
    flags = flags_dictionary[paperwork_type]

    return flags